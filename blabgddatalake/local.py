"""A module that deals with local copies of Google Drive files and metadata."""

from __future__ import annotations

from datetime import datetime, timezone
from dateutil import tz
from packaging.version import parse as parse_version
from sqlalchemy import Integer, String, Boolean, BigInteger, \
    Column, ForeignKey, select, update
from sqlalchemy import create_engine
from sqlalchemy.engine import Dialect
from sqlalchemy.engine.base import Engine
from sqlalchemy.engine import URL as sqlalchemy_url
from sqlalchemy.orm import declarative_base, Session, relationship, backref
from sqlalchemy.types import TypeDecorator, DateTime
from structlog import getLogger
from sys import maxsize
from typing import Any
from urllib.parse import parse_qs

from . import __version__ as VERSION


logger = getLogger(__name__)


Base = declarative_base()


class _TimestampWithTZ(TypeDecorator):
    impl = DateTime
    cache_ok = True

    def process_bind_param(self, value: Any, _dialect: Dialect) -> datetime:
        if value.tzinfo is None:
            value = value.astimezone(tz.tzlocal())
        return value.astimezone(timezone.utc)

    def process_result_value(self, value: Any, _dialect: Dialect) -> datetime:
        if value.tzinfo is None:
            return value.replace(tzinfo=timezone.utc)
        return value.astimezone(timezone.utc)


class LocalFile(Base):
    """Represents a local copy of a file downloaded from Google Drive."""

    __tablename__ = 'gdfile'

    gdfile_id = Column(Integer, primary_key=True)
    """File id (used internally by the database engine)"""

    id: str = Column(String, unique=True, nullable=False)
    """File id (generated by Google Drive)"""

    name = Column(String)
    """File name (without directory)"""

    created_time = Column(_TimestampWithTZ())
    """Creation timestamp"""

    modified_time = Column(_TimestampWithTZ())
    """Last modification timestamp"""

    modified_by = Column(String)
    """Name of the user who made the last change"""

    web_url = Column(String)
    """URL to access the file on a browser"""

    icon_url = Column(String)
    """URL of the file icon (does not require authentication)"""

    is_root = Column(Boolean, default=False)
    """Whether this directory is the root specified in the settings
        (not necessarily the root on Google Drive)"""

    mime_type = Column(String)
    """MIME type"""

    size = Column(BigInteger)
    """File size in bytes"""

    md5_checksum = Column(String)
    """File hash"""

    head_revision_id = Column(String)
    """Current version id (generated by Google Drive)"""

    parent_id = Column(String, ForeignKey(id))
    parent: 'LocalFile' = relationship(
        'LocalFile',
        backref=backref('_children'), remote_side=[id]
    )

    _children: list['LocalFile'] | None

    @property
    def is_directory(self) -> bool:
        """Whether this is a directory.

        Returns:
            ``True`` if this is a directory,
            ``False`` if this is a regular file
        """
        return self.mime_type == 'application/vnd.google-apps.folder'

    @property
    def children(self) -> list['LocalFile'] | None:
        """Subdirectories and regular files in this directory.

        Returns:
            a list of the directory's children
        """
        return (self._children or []) if self.is_directory else None

    def __repr__(self) -> str:
        return '(name={}, gdid={}, size={}, md5={})'.format(
            self.name, self.gdfile_id, self.size, self.md5_checksum)

    def print_tree(self, _pfx: list[bool] | None = None) -> None:
        """Print the tree file names to standard output (for debugging)."""
        if _pfx is None:
            _pfx = []
        for i, p in enumerate(_pfx[:-1]):
            print(' ┃ ' if p else '   ', end=' ')
        if _pfx:
            print(' ┠─' if _pfx[-1] else ' ┖─', end=' ')
        print(self.name)
        for child in (self.children or [])[:-1]:
            child.print_tree(_pfx + [True])
        if self.children:
            self.children[-1].print_tree(_pfx + [False])

    def flatten(self) -> dict[str, LocalFile]:
        """Convert the tree to a flat dictionary.

        Returns:
            a flat dictionary where files are mapped by their ids
        """
        d: dict[str, 'LocalFile'] = {self.id: self}
        for c in self.children or []:
            d.update(c.flatten() if isinstance(c, LocalFile)
                     else {c.id: c})
        return d

    @property
    def is_google_workspace_file(self) -> bool:
        """Whether this is a Google Workspace file.

        Returns:
            ``True`` if and only if the MIME type starts
            with ``application/vnd.google-apps``
        """
        return not self.is_directory and \
            (self.md5_checksum or '').startswith('application/vnd.google-apps')

    @property
    def can_download(self) -> bool:
        """Whether this file can be downloaded.

        Returns:
            currently, returns ``True`` if and only if
            this is neither a directory nor a Google Workspace file
        """
        return not self.is_directory and not self.is_google_workspace_file

    @property
    def local_name(self) -> str:
        """Local file name (without path).

        Returns:
            Local file name
        """
        return self.id + \
            '_' + (self.head_revision_id or '') + \
            '_' + (self.md5_checksum or '')

    @property
    def virtual_path(self) -> list[str]:
        """Return a virtual path to this file on Google Drive.

        Returns:
            a list of directory names starting from the root,
            where each directory is a child of its predecessor,
            ended by the name of this file itself
        """
        p = []
        if self.parent and not self.parent.is_root:
            p = self.parent.virtual_path
        return p + [self.name or '']

    def as_dict(self, depth: int = maxsize,
                remove_gdfile_id: bool = False) -> dict[str, Any]:
        """Prepare the object to be serialised by converting it to a dict.

        Args:
            depth: maximum depth
            remove_gdfile_id: remove internal id

        Returns:
            a dictionary with the object data
        """
        d = {c.name: getattr(self, c.name) for c in self.__table__.columns}
        d['can_download'] = self.can_download
        d['virtual_path'] = self.virtual_path
        if remove_gdfile_id:
            del d['gdfile_id']
        if depth > 0 and self._children:
            d['children'] = [c.as_dict(depth - 1, remove_gdfile_id)
                             for c in self._children]
        if self.is_directory:
            for k in ['head_revision_id', 'size',
                      'md5_checksum', 'can_download']:
                d.pop(k, None)
        else:
            d.pop('is_root', None)
        return d


class FileToDelete(Base):
    """Represents a local copy of a Google Drive file marked for deletion.

    The file has been either deleted or overwritten on Google Drive.
    """

    __tablename__ = 'filetodelete'

    filetodelete_id = Column(Integer, primary_key=True)
    """File id (used internally by the database engine)"""

    local_name: str = Column(String, nullable=False)
    """Local file name (without path)"""

    id: str = Column(String, nullable=False)
    """File id (generated by Google Drive)"""

    name = Column(String)
    """File name (without directory)"""

    modified_time = Column(_TimestampWithTZ())
    """Last modification timestamp"""

    mime_type = Column(String)
    """MIME type"""

    size = Column(BigInteger)
    """File size in bytes"""

    md5_checksum = Column(String)
    """File hash"""

    head_revision_id = Column(String)
    """Current version id (generated by Google Drive)"""

    removedfromindexat: datetime = Column(
        _TimestampWithTZ(), default=datetime.now())

    def as_dict(self) -> dict[str, Any]:
        """Prepare the object to be serialised by converting it to a dict.

        Returns:
            a dictionary with the object data
        """
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}


class DatabaseMetadata(Base):
    """Represents metadata such as the program version."""

    __tablename__ = '_db_metadata'

    _db_metadata_id = Column(Integer, primary_key=True)
    """Internal id used by the database engine."""

    key = Column(String, unique=True)
    """Metadata key"""

    value = Column(String)
    """Metadata value corresponding to key"""

    def __repr__(self):
        return f'[{self.key} = {self.value}]'


class LocalStorageDatabase:
    """Interacts with a database that stores file metadata."""

    def __init__(self, db_config: dict[str, str]):
        """
        Args:
            db_config: database configuration

        For a description of the expected keys and values of `db_config`,
        see the section ``GoogleDrive`` in
        :download:`the documentation <../README_CONFIG.md>`.
        """  # noqa:D205,D400
        self.db_config: dict[str, str] = db_config
        self._engine = self.__create_engine()
        Base.metadata.create_all(self._engine)
        self.upgrade()

    def __create_engine(self) -> Engine:
        cfg = self.db_config
        driver = cfg.get('Driver', '')
        url = sqlalchemy_url.create(
            cfg['Dialect'] + ('+' if driver else '') + driver,
            username=cfg.get('Username', None),
            password=cfg.get('Password', None),
            host=cfg.get('Host', None),
            port=int(p) if (p := cfg.get('Port', None)) else None,
            database=cfg.get('Database', None),
            query=parse_qs(cfg.get('Query', ''))
        )
        return create_engine(url)

    def upgrade(self) -> None:
        """Upgrade database to the current model version. Currently unused."""
        with Session(self._engine) as session:
            stmt = select(DatabaseMetadata).where(  # type: ignore
                DatabaseMetadata.key == 'version')
            result = session.execute(stmt)
            log = logger.bind(new=False)
            if (version_row := result.first()):
                version = version_row[0].value
            else:
                version = VERSION
                log = logger.bind(new=True)
                row = DatabaseMetadata(key='version', value=version)
                session.add(row)
                session.commit()
            log.info('checking database version', version=version)

        def upgrade_1_0_0() -> None:
            pass

        upgraders = {
            '1.0.0': upgrade_1_0_0,
        }

        current_version = parse_version(version)
        for version, fn in upgraders.items():
            v = parse_version(version)
            if current_version < v:
                logger.info('upgrading database version',
                            old=current_version, new=v)
                with Session(self._engine) as session:
                    fn()
                    session.execute(
                        update(DatabaseMetadata).where(
                            DatabaseMetadata.key == 'version').
                        values(value=version))
                    session.commit()
                    current_version = v

    def get_tree(self, session: Session) -> LocalFile:
        """Return an object representing the root of the local file tree.

        The files and subdirectories can be accessed in the
        `children` attribute as long as the `session` is still open.

        Args:
            session: the database session

        Returns:
            an object representing the root of the local
            file tree (which is a snapshot of the contents stored in
            Google Drive)

        Raises:
            RuntimeError: if the local database is corrupted and does not
                contain a root directory
        """
        logger.info('requesting local tree')
        stmt = select(LocalFile).where(LocalFile.is_root)  # type: ignore
        result = session.execute(stmt)
        root = result.scalars().first()
        if root is None:
            raise RuntimeError('Local database has no root directory')
        return root

    def get_file_by_id(self, session: Session, id: str) -> LocalFile | None:
        """Return an object representing a specific file stored locally.

        It can be a regular file or a directory.

        Args:
            session: the database session
            id: the id of the file or directory

        Returns:
            an object representing the file with the specified id,
            or `None` if it does not exist
        """
        log = logger.bind(id=id)
        log.info('requesting local file')
        stmt = select(LocalFile).where(LocalFile.id == id)  # type: ignore
        result = session.execute(stmt)
        f = result.scalars().first()
        log.info('requested local file', found=bool(f))
        return f

    def new_session(self) -> Session:
        """Create a new database session.

        Returns:
            a new database session
        """
        return Session(self._engine)

    def get_files_to_delete(self, session: Session,
                            until: datetime | None = None) \
            -> list[FileToDelete]:
        """Return files marked for deletion before a given instant.

        This method only applies to regular files. The returned files
        have been either deleted or overwritten with newer versions on
        Google Drive.

        Args:
            session: the database session
            until: if set, only files that have marked for deletion up to
                the specified instant will be returned

        Returns:
            a (possibly empty) list of objects representing the files
            that have been marked for deletion until the time set by `until`
        """
        logger.info('requesting list of files to delete', until=until)
        stmt = select(FileToDelete)  # type: ignore
        if until:
            stmt = stmt.where(FileToDelete.removedfromindexat <= until)
        result = session.execute(stmt)
        return result.scalars().all()

    def get_file_to_delete(self, session: Session, id: str,
                           head_revision_id: str) \
            -> FileToDelete | None:
        """Return a specific version of a file marked for deletion.

        This method only applies to regular files that have been either
        deleted or overwritten with newer versions on
        Google Drive.

        Args:
            session: the database session
            id: the id of the file
            head_revision_id: the id of the specific header version

        Returns:
            an object representing the file marked for deletion, or `None`
            if it does not exist
        """
        logger.info('requesting a specific file marked for deletion', id=id)
        stmt = select(FileToDelete).where(  # type: ignore
            FileToDelete.id == id)
        if head_revision_id:
            stmt = stmt.where(
                FileToDelete.head_revision_id == head_revision_id)
        result = session.execute(stmt)
        return result.scalars().first()
