"""Contains a class that represents a file or a directory on Google Drive."""
from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime
from typing import Any

from dateutil import parser as timestamp_parser
from structlog import getLogger

from blabgddatalake.common import NonLeafTreeNode, TreeNode

_logger = getLogger(__name__)


@dataclass
class RemoteFile(TreeNode):
    """Represents a regular file or a directory stored on Google Drive."""

    name: str
    """File name (without directory)"""

    id: str
    """File id (generated by Google Drive)"""

    mime_type: str
    """MIME type"""

    created_time: datetime
    """Creation timestamp"""

    modified_time: datetime
    """Last modification timestamp"""

    modified_by: str
    """Name of the user who made the last change"""

    web_url: str
    """URL to access the file on a browser"""

    icon_url: str
    """URL of the file icon (does not require authentication)"""

    parent: RemoteDirectory | None
    """Parent directory"""

    @property
    def parent_id(self) -> str | None:
        """Id of the parent directory.

        Returns:
            The id of the parent directory, or ``None`` if this is the root
        """
        return p.id if (p := self.parent) is not None else None


@dataclass
class RemoteDirectory(RemoteFile, NonLeafTreeNode):
    """Represents a directory stored on Google Drive."""

    children: list[RemoteFile] = field(default_factory=list)
    """Subdirectories and regular files in this directory"""

    is_root: bool = False
    """Whether this directory is the root specified in the settings
        (not necessarily the root on Google Drive)"""

    @classmethod
    def from_dict(cls,
                  metadata: dict[str, Any],
                  parent: RemoteDirectory | None = None) -> RemoteDirectory:
        """Create an instance from a dictionary with data from Google Drive.

        Documentation is available
        `here <https://developers.google.com/drive/api/v3/reference/files>`_.

        Args:
            metadata: a dictionary with file metadata
            parent: the parent directory, if this is not the root

        Returns:
            an instance with the metadata obtained from ``f``

        """
        return RemoteDirectory(
            metadata['name'], metadata['id'], metadata['mimeType'],
            timestamp_parser.parse(metadata['createdTime']),
            timestamp_parser.parse(metadata['modifiedTime']),
            metadata['lastModifyingUser']['displayName'],
            metadata['webViewLink'], metadata['iconLink'], parent)

    def flatten(self) -> dict[str, RemoteFile]:
        """Convert the tree to a flat dictionary.

        Returns:
            a flat dictionary where files are mapped by their ids
        """
        d: dict[str, RemoteFile] = {self.id: self}
        for c in self.children:
            d.update(
                c.flatten() if isinstance(c, RemoteDirectory) else {c.id: c})
        return d
