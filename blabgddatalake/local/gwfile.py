"""Contains a class that represents a Google Workspace file on Google Drive."""
from __future__ import annotations

from datetime import datetime
from sys import maxsize
from typing import Any, Sequence

from overrides import overrides
from sqlalchemy import (Boolean, Column, ForeignKey, Integer, String,
                        UniqueConstraint)
from sqlalchemy.orm import backref, relationship

from blabgddatalake.local import Base, _TimestampWithTZ, _CommaSeparatedValues
from blabgddatalake.local.file import LocalFile
from blabgddatalake.local.regularfile import LocalRegularFile


class LocalGoogleWorkspaceFile(LocalFile):
    """Represents a Google Workspace file from Google Drive."""

    __mapper_args__ = {'polymorphic_identity': 'Google Workspace file'}

    head_version: LocalExportedGWFileVersion = relationship(
        'LocalExportedGWFileVersion',
        uselist=False,
        primaryjoin=('''and_(
            LocalExportedGWFileVersion.file_id ==
            LocalGoogleWorkspaceFile.id,
            LocalExportedGWFileVersion.modified_time ==
            LocalGoogleWorkspaceFile.modified_time,
        )'''.strip()))
    """Current version"""

    @property
    def can_export(self) -> bool:
        """Whether file can be exported (downloaded).

        Returns:
            ``True`` if the file can be exported, ``False`` otherwise
        """
        return self.head_version.can_export

    @overrides
    def as_dict(self,
                depth: int = maxsize,
                remove_gdfile_id: bool = False) -> dict[str, Any]:
        d = super().as_dict(depth, remove_gdfile_id)
        d['can_export'] = self.can_export
        d['export_formats'] = self.head_version.extensions
        return d


class LocalExportedGWFileVersion(Base):
    """Represents a local version of an exported Google Workspace file."""

    __tablename__ = 'gdgwfilevers'

    gdgwfilevers_id: int = Column(Integer, primary_key=True)
    """Version id (used internally by the database engine)"""

    file_id: str = Column(String, ForeignKey(LocalRegularFile.id))
    """File id (generated by Google Drive)"""

    file: LocalRegularFile = relationship(LocalRegularFile,
                                          viewonly=True,
                                          foreign_keys=[file_id],
                                          backref=backref('_versions'))
    """File this version belongs to"""

    name: str = Column(String)
    """File name (without directory)"""

    modified_time: datetime = Column(_TimestampWithTZ())
    """Last modification timestamp"""

    modified_by = Column(String)
    """Name of the user who made the last change"""

    mime_type: str | None = Column(String)
    """MIME type"""

    extensions: list[str] = Column(_CommaSeparatedValues(), nullable=False)
    """Comma-separated extensions"""

    can_export: bool = Column(Boolean, nullable=False)
    """Whether file can be exported"""

    @property
    def local_name_without_extension(self) -> str:
        """Local file name (without path and extension).

        Returns:
            The local file name without the extension
        """
        return (self.file_id + '_' +
                self.modified_time.strftime('%Y%m%d_%H%M%S%f'))

    @property
    def local_names(self) -> dict[str, str]:
        """Local file names (without path).

        Returns:
            A dictionary mapping extensions to the corresponding
            local file names
        """
        return {
            ext: self.local_name_without_extension + '.' + ext
            for ext in self.extensions
        }

    obsolete_since: datetime = Column(_TimestampWithTZ(), nullable=True)
    """Instant when the deletion of the file was detected

    It is ``None`` for files that have not been deleted.
    """

    __table_args__ = (UniqueConstraint('file_id',
                                       'modified_time',
                                       name='_gw_file_version_unique'), )


__all__: Sequence[str] = [
    c.__name__ for c in [
        LocalExportedGWFileVersion,
        LocalGoogleWorkspaceFile,
    ]
]
